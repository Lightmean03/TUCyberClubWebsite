{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = assertString;\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction assertString(input) {\n  var isString = typeof input === 'string' || input instanceof String;\n  if (!isString) {\n    var invalidType = _typeof(input);\n    if (input === null) invalidType = 'null';else if (invalidType === 'object') invalidType = input.constructor.name;\n    throw new TypeError(\"Expected a string but received a \".concat(invalidType));\n  }\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","assertString","_typeof","obj","Symbol","iterator","constructor","prototype","input","isString","String","invalidType","name","TypeError","concat","module"],"sources":["/home/lightmean/node_modules/validator/lib/util/assertString.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = assertString;\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction assertString(input) {\n  var isString = typeof input === 'string' || input instanceof String;\n\n  if (!isString) {\n    var invalidType = _typeof(input);\n\n    if (input === null) invalidType = 'null';else if (invalidType === 'object') invalidType = input.constructor.name;\n    throw new TypeError(\"Expected a string but received a \".concat(invalidType));\n  }\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,YAAY;AAE9B,SAASC,OAAOA,CAACC,GAAG,EAAE;EAAE,yBAAyB;;EAAE,IAAI,OAAOC,MAAM,KAAK,UAAU,IAAI,OAAOA,MAAM,CAACC,QAAQ,KAAK,QAAQ,EAAE;IAAEH,OAAO,GAAG,SAASA,OAAOA,CAACC,GAAG,EAAE;MAAE,OAAO,OAAOA,GAAG;IAAE,CAAC;EAAE,CAAC,MAAM;IAAED,OAAO,GAAG,SAASA,OAAOA,CAACC,GAAG,EAAE;MAAE,OAAOA,GAAG,IAAI,OAAOC,MAAM,KAAK,UAAU,IAAID,GAAG,CAACG,WAAW,KAAKF,MAAM,IAAID,GAAG,KAAKC,MAAM,CAACG,SAAS,GAAG,QAAQ,GAAG,OAAOJ,GAAG;IAAE,CAAC;EAAE;EAAE,OAAOD,OAAO,CAACC,GAAG,CAAC;AAAE;AAEzX,SAASF,YAAYA,CAACO,KAAK,EAAE;EAC3B,IAAIC,QAAQ,GAAG,OAAOD,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYE,MAAM;EAEnE,IAAI,CAACD,QAAQ,EAAE;IACb,IAAIE,WAAW,GAAGT,OAAO,CAACM,KAAK,CAAC;IAEhC,IAAIA,KAAK,KAAK,IAAI,EAAEG,WAAW,GAAG,MAAM,CAAC,KAAK,IAAIA,WAAW,KAAK,QAAQ,EAAEA,WAAW,GAAGH,KAAK,CAACF,WAAW,CAACM,IAAI;IAChH,MAAM,IAAIC,SAAS,CAAC,mCAAmC,CAACC,MAAM,CAACH,WAAW,CAAC,CAAC;EAC9E;AACF;AAEAI,MAAM,CAACjB,OAAO,GAAGA,OAAO,CAACE,OAAO;AAChCe,MAAM,CAACjB,OAAO,CAACE,OAAO,GAAGF,OAAO,CAACE,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}