{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEmail;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\nvar _isByteLength = _interopRequireDefault(require(\"./isByteLength\"));\nvar _isFQDN = _interopRequireDefault(require(\"./isFQDN\"));\nvar _isIP = _interopRequireDefault(require(\"./isIP\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar default_email_options = {\n  allow_display_name: false,\n  require_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true,\n  blacklisted_chars: '',\n  ignore_max_length: false,\n  host_blacklist: [],\n  host_whitelist: []\n};\n/* eslint-disable max-len */\n\n/* eslint-disable no-control-regex */\n\nvar splitNameAddress = /^([^\\x00-\\x1F\\x7F-\\x9F\\cX]+)</i;\nvar emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nvar gmailUserPart = /^[a-z\\d]+$/;\nvar quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nvar emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nvar quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\nvar defaultMaxEmailLength = 254;\n/* eslint-enable max-len */\n\n/* eslint-enable no-control-regex */\n\n/**\n * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2\n * @param {String} display_name\n */\n\nfunction validateDisplayName(display_name) {\n  var display_name_without_quotes = display_name.replace(/^\"(.+)\"$/, '$1'); // display name with only spaces is not valid\n\n  if (!display_name_without_quotes.trim()) {\n    return false;\n  } // check whether display name contains illegal character\n\n  var contains_illegal = /[\\.\";<>]/.test(display_name_without_quotes);\n  if (contains_illegal) {\n    // if contains illegal characters,\n    // must to be enclosed in double-quotes, otherwise it's not a valid display name\n    if (display_name_without_quotes === display_name) {\n      return false;\n    } // the quotes in display name must start with character symbol \\\n\n    var all_start_with_back_slash = display_name_without_quotes.split('\"').length === display_name_without_quotes.split('\\\\\"').length;\n    if (!all_start_with_back_slash) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isEmail(str, options) {\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, default_email_options);\n  if (options.require_display_name || options.allow_display_name) {\n    var display_email = str.match(splitNameAddress);\n    if (display_email) {\n      var display_name = display_email[1]; // Remove display name and angle brackets to get email address\n      // Can be done in the regex but will introduce a ReDOS (See  #1597 for more info)\n\n      str = str.replace(display_name, '').replace(/(^<|>$)/g, ''); // sometimes need to trim the last space to get the display name\n      // because there may be a space between display name and email address\n      // eg. myname <address@gmail.com>\n      // the display name is `myname` instead of `myname `, so need to trim the last space\n\n      if (display_name.endsWith(' ')) {\n        display_name = display_name.slice(0, -1);\n      }\n      if (!validateDisplayName(display_name)) {\n        return false;\n      }\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n  if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {\n    return false;\n  }\n  var parts = str.split('@');\n  var domain = parts.pop();\n  var lower_domain = domain.toLowerCase();\n  if (options.host_blacklist.includes(lower_domain)) {\n    return false;\n  }\n  if (options.host_whitelist.length > 0 && !options.host_whitelist.includes(lower_domain)) {\n    return false;\n  }\n  var user = parts.join('@');\n  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {\n    /*\n      Previously we removed dots for gmail addresses before validating.\n      This was removed because it allows `multiple..dots@gmail.com`\n      to be reported as valid, but it is not.\n      Gmail only normalizes single dots, removing them from here is pointless,\n      should be done in normalizeEmail\n    */\n    user = user.toLowerCase(); // Removing sub-address from username before gmail validation\n\n    var username = user.split('+')[0]; // Dots are not included in gmail length restriction\n\n    if (!(0, _isByteLength.default)(username.replace(/\\./g, ''), {\n      min: 6,\n      max: 30\n    })) {\n      return false;\n    }\n    var _user_parts = username.split('.');\n    for (var i = 0; i < _user_parts.length; i++) {\n      if (!gmailUserPart.test(_user_parts[i])) {\n        return false;\n      }\n    }\n  }\n  if (options.ignore_max_length === false && (!(0, _isByteLength.default)(user, {\n    max: 64\n  }) || !(0, _isByteLength.default)(domain, {\n    max: 254\n  }))) {\n    return false;\n  }\n  if (!(0, _isFQDN.default)(domain, {\n    require_tld: options.require_tld,\n    ignore_max_length: options.ignore_max_length\n  })) {\n    if (!options.allow_ip_domain) {\n      return false;\n    }\n    if (!(0, _isIP.default)(domain)) {\n      if (!domain.startsWith('[') || !domain.endsWith(']')) {\n        return false;\n      }\n      var noBracketdomain = domain.slice(1, -1);\n      if (noBracketdomain.length === 0 || !(0, _isIP.default)(noBracketdomain)) {\n        return false;\n      }\n    }\n  }\n  if (user[0] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\n  }\n  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\n  var user_parts = user.split('.');\n  for (var _i = 0; _i < user_parts.length; _i++) {\n    if (!pattern.test(user_parts[_i])) {\n      return false;\n    }\n  }\n  if (options.blacklisted_chars) {\n    if (user.search(new RegExp(\"[\".concat(options.blacklisted_chars, \"]+\"), 'g')) !== -1) return false;\n  }\n  return true;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","isEmail","_assertString","_interopRequireDefault","require","_merge","_isByteLength","_isFQDN","_isIP","obj","__esModule","default_email_options","allow_display_name","require_display_name","allow_utf8_local_part","require_tld","blacklisted_chars","ignore_max_length","host_blacklist","host_whitelist","splitNameAddress","emailUserPart","gmailUserPart","quotedEmailUser","emailUserUtf8Part","quotedEmailUserUtf8","defaultMaxEmailLength","validateDisplayName","display_name","display_name_without_quotes","replace","trim","contains_illegal","test","all_start_with_back_slash","split","length","str","options","display_email","match","endsWith","slice","parts","domain","pop","lower_domain","toLowerCase","includes","user","join","domain_specific_validation","username","min","max","_user_parts","i","allow_ip_domain","startsWith","noBracketdomain","pattern","user_parts","_i","search","RegExp","concat","module"],"sources":["/home/lightmean/Code/TUsite/TUCyberClubWebsite/my-app/node_modules/validator/lib/isEmail.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEmail;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\n\nvar _isByteLength = _interopRequireDefault(require(\"./isByteLength\"));\n\nvar _isFQDN = _interopRequireDefault(require(\"./isFQDN\"));\n\nvar _isIP = _interopRequireDefault(require(\"./isIP\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_email_options = {\n  allow_display_name: false,\n  require_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true,\n  blacklisted_chars: '',\n  ignore_max_length: false,\n  host_blacklist: [],\n  host_whitelist: []\n};\n/* eslint-disable max-len */\n\n/* eslint-disable no-control-regex */\n\nvar splitNameAddress = /^([^\\x00-\\x1F\\x7F-\\x9F\\cX]+)</i;\nvar emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nvar gmailUserPart = /^[a-z\\d]+$/;\nvar quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nvar emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nvar quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\nvar defaultMaxEmailLength = 254;\n/* eslint-enable max-len */\n\n/* eslint-enable no-control-regex */\n\n/**\n * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2\n * @param {String} display_name\n */\n\nfunction validateDisplayName(display_name) {\n  var display_name_without_quotes = display_name.replace(/^\"(.+)\"$/, '$1'); // display name with only spaces is not valid\n\n  if (!display_name_without_quotes.trim()) {\n    return false;\n  } // check whether display name contains illegal character\n\n\n  var contains_illegal = /[\\.\";<>]/.test(display_name_without_quotes);\n\n  if (contains_illegal) {\n    // if contains illegal characters,\n    // must to be enclosed in double-quotes, otherwise it's not a valid display name\n    if (display_name_without_quotes === display_name) {\n      return false;\n    } // the quotes in display name must start with character symbol \\\n\n\n    var all_start_with_back_slash = display_name_without_quotes.split('\"').length === display_name_without_quotes.split('\\\\\"').length;\n\n    if (!all_start_with_back_slash) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isEmail(str, options) {\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, default_email_options);\n\n  if (options.require_display_name || options.allow_display_name) {\n    var display_email = str.match(splitNameAddress);\n\n    if (display_email) {\n      var display_name = display_email[1]; // Remove display name and angle brackets to get email address\n      // Can be done in the regex but will introduce a ReDOS (See  #1597 for more info)\n\n      str = str.replace(display_name, '').replace(/(^<|>$)/g, ''); // sometimes need to trim the last space to get the display name\n      // because there may be a space between display name and email address\n      // eg. myname <address@gmail.com>\n      // the display name is `myname` instead of `myname `, so need to trim the last space\n\n      if (display_name.endsWith(' ')) {\n        display_name = display_name.slice(0, -1);\n      }\n\n      if (!validateDisplayName(display_name)) {\n        return false;\n      }\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n\n  if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {\n    return false;\n  }\n\n  var parts = str.split('@');\n  var domain = parts.pop();\n  var lower_domain = domain.toLowerCase();\n\n  if (options.host_blacklist.includes(lower_domain)) {\n    return false;\n  }\n\n  if (options.host_whitelist.length > 0 && !options.host_whitelist.includes(lower_domain)) {\n    return false;\n  }\n\n  var user = parts.join('@');\n\n  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {\n    /*\n      Previously we removed dots for gmail addresses before validating.\n      This was removed because it allows `multiple..dots@gmail.com`\n      to be reported as valid, but it is not.\n      Gmail only normalizes single dots, removing them from here is pointless,\n      should be done in normalizeEmail\n    */\n    user = user.toLowerCase(); // Removing sub-address from username before gmail validation\n\n    var username = user.split('+')[0]; // Dots are not included in gmail length restriction\n\n    if (!(0, _isByteLength.default)(username.replace(/\\./g, ''), {\n      min: 6,\n      max: 30\n    })) {\n      return false;\n    }\n\n    var _user_parts = username.split('.');\n\n    for (var i = 0; i < _user_parts.length; i++) {\n      if (!gmailUserPart.test(_user_parts[i])) {\n        return false;\n      }\n    }\n  }\n\n  if (options.ignore_max_length === false && (!(0, _isByteLength.default)(user, {\n    max: 64\n  }) || !(0, _isByteLength.default)(domain, {\n    max: 254\n  }))) {\n    return false;\n  }\n\n  if (!(0, _isFQDN.default)(domain, {\n    require_tld: options.require_tld,\n    ignore_max_length: options.ignore_max_length\n  })) {\n    if (!options.allow_ip_domain) {\n      return false;\n    }\n\n    if (!(0, _isIP.default)(domain)) {\n      if (!domain.startsWith('[') || !domain.endsWith(']')) {\n        return false;\n      }\n\n      var noBracketdomain = domain.slice(1, -1);\n\n      if (noBracketdomain.length === 0 || !(0, _isIP.default)(noBracketdomain)) {\n        return false;\n      }\n    }\n  }\n\n  if (user[0] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\n  }\n\n  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\n  var user_parts = user.split('.');\n\n  for (var _i = 0; _i < user_parts.length; _i++) {\n    if (!pattern.test(user_parts[_i])) {\n      return false;\n    }\n  }\n\n  if (options.blacklisted_chars) {\n    if (user.search(new RegExp(\"[\".concat(options.blacklisted_chars, \"]+\"), 'g')) !== -1) return false;\n  }\n\n  return true;\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}